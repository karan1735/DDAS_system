import os
import re
import hashlib
import requests
import shutil

# Function to calculate the SHA-256 hash of a file
def calculate_file_hash(file_path):
    sha256_hash = hashlib.sha256()
    try:
        with open(file_path, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()
    except Exception as e:
        return f"Error calculating hash: {str(e)}"

# Function to scan a file for dangerous content
def scan_file_content(file_path):
    print(f"Scanning {file_path} for vulnerabilities...")
    vulnerabilities = []
    
    try:
        with open(file_path, 'r', errors='ignore') as f:
            content = f.read()

            # Example: Detecting usage of dangerous functions in code
            dangerous_patterns = {
                'eval()': r'\beval\(',
                'exec()': r'\bexec\(',
                'system()': r'\bsystem\(',
                'shell_exec()': r'\bshell_exec\(',
                'dangerous SQL': r'\bSELECT\b.*\bFROM\b.*\bWHERE\b.*\b1\s*=\s*1'
            }

            for pattern_name, pattern in dangerous_patterns.items():
                if re.search(pattern, content):
                    vulnerabilities.append(f"Potential dangerous usage of '{pattern_name}' detected")

            # Check for sensitive information (e.g., hardcoded passwords)
            sensitive_info_patterns = {
                'password': r'\bpassword\s*[=:]\s*[\'"]?.+?[\'"]?\b',
                'API key': r'\b(api_key|apikey|APIKey|API_KEY)\s*[=:]\s*[\'"]?.+?[\'"]?\b'
            }
            for pattern_name, pattern in sensitive_info_patterns.items():
                if re.search(pattern, content):
                    vulnerabilities.append(f"Potential exposure of sensitive information: {pattern_name}")
                    
    except Exception as e:
        vulnerabilities.append(f"Error reading file: {str(e)}")
    
    return vulnerabilities

# Function to scan a file for malware by comparing its hash with VirusTotal database
def scan_file_for_malware(file_path):
    print(f"Checking {file_path} for malware signatures...")
    file_hash = calculate_file_hash(file_path)
    
    # VirusTotal API Key
    api_key = '8888cb5369978885d07a728fd06c067846c98cddfbea63946899846c308e035f'
    headers = {
        'x-apikey': api_key
    }
    url = f'https://www.virustotal.com/api/v3/files/{file_hash}'
    
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            result = response.json()
            last_analysis_stats = result['data']['attributes']['last_analysis_stats']
            malicious_count = last_analysis_stats['malicious']
            
            if malicious_count > 0:
                return f"Virus detected! ({malicious_count} engines flagged this file)"
            else:
                return "No virus detected."
        elif response.status_code == 404:
            # File not found, so upload it
            upload_result = upload_file_to_virustotal(file_path)
            return upload_result
        elif response.status_code == 401:
            return "Error checking virus status: Unauthorized. Check your API key."
        else:
            return f"Error checking virus status: {response.status_code} {response.reason}"
    except Exception as e:
        return f"Error checking virus status: {str(e)}"

# Function to upload a file to VirusTotal for analysis
def upload_file_to_virustotal(file_path):
    print(f"Uploading {file_path} to VirusTotal for analysis...")
    api_key = '8888cb5369978885d07a728fd06c067846c98cddfbea63946899846c308e035f'
    headers = {
        'x-apikey': api_key
    }
    files = {'file': open(file_path, 'rb')}
    url = 'https://www.virustotal.com/api/v3/files'
    
    try:
        response = requests.post(url, headers=headers, files=files)
        if response.status_code == 200:
            result = response.json()
            file_id = result['data']['id']
            return f"File uploaded successfully. Analysis ID: {file_id}"
        else:
            return f"Error uploading file: {response.status_code} {response.reason}"
    except Exception as e:
        return f"Error uploading file: {str(e)}"

# Function to get the file permissions and metadata
def check_file_permissions(file_path):
    print(f"Checking permissions and metadata for {file_path}...")
    try:
        file_stat = os.stat(file_path)
        permissions = oct(file_stat.st_mode)[-3:]  # Get file permissions
        return f"File permissions: {permissions}"
    except Exception as e:
        return f"Error checking file permissions: {str(e)}"

# Function to delete an infected file
def delete_infected_file(file_path):
    try:
        os.remove(file_path)
        print(f"Infected file '{file_path}' has been deleted.")
    except Exception as e:
        print(f"Error deleting file: {str(e)}")

# Function to quarantine an infected file by moving it to a quarantine folder
def quarantine_infected_file(file_path, quarantine_dir):
    try:
        if not os.path.exists(quarantine_dir):
            os.makedirs(quarantine_dir)  # Create the quarantine folder if it doesn't exist
        shutil.move(file_path, os.path.join(quarantine_dir, os.path.basename(file_path)))
        print(f"Infected file '{file_path}' has been quarantined to '{quarantine_dir}'.")
        return quarantine_dir  # Return the quarantine directory path
    except Exception as e:
        print(f"Error quarantining file: {str(e)}")
        return None

# Function to scan a directory for all files and perform the scans
def scan_directory_for_files(directory_path):
    results = {}
    quarantine_dir = os.path.join(directory_path, "quarantine")
    
    # Iterate through all files in the directory
    for root, dirs, files in os.walk(directory_path):
        for file in files:
            file_path = os.path.join(root, file)
            if not os.path.isfile(file_path):
                continue  # Skip if not a file
            file_vulnerabilities = scan_file_content(file_path)
            file_hash = calculate_file_hash(file_path)
            virus_status = scan_file_for_malware(file_path)
            file_permissions = check_file_permissions(file_path)
            
            # Store the results
            results[file_path] = {
                "Vulnerabilities": file_vulnerabilities,
                "Hash (SHA-256)": file_hash,
                "Permissions": file_permissions,
                "Virus Status": virus_status
            }
            
            # Take action if a virus is detected
            if "Virus detected" in virus_status:
                print("Action Required: Virus detected.")
                action = input(f"Do you want to (d)elete or (q)uarantine the file '{file_path}'? (d/q): ").strip().lower()
                if action == 'd':
                    delete_infected_file(file_path)
                elif action == 'q':
                    quarantine_infected_file(file_path, quarantine_dir)
                else:
                    print("No action taken for the file.")
    
    return results

# Function to print the results
def print_scan_results(results):
    for file_path, result in results.items():
        print(f"\nResults for {file_path}:")
        for key, value in result.items():
            print(f"{key}: {value}")
        # Determine if action is required based on virus status
        if "Virus detected" in result["Virus Status"]:
            print("Action Required: Virus detected. File has been handled.")
        else:
            print("File is safe.")

# Main function to execute the file scanning
def main():
    directory = input("Enter the directory path to scan for files: ")
    if not os.path.isdir(directory):
        print("Invalid directory. Please provide a valid directory path.")
        return
    
    results = scan_directory_for_files(directory)
    print_scan_results(results)

if __name__ == "__main__":
    main()
